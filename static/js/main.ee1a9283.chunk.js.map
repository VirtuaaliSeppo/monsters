{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","searchString","type","value","onChange","App","e","setState","target","state","fetch","then","response","json","result","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCNTC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNdM,G,MAAY,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aACrD,OACE,uBACEb,UAAU,SACVc,KAAK,SACLC,MAAOF,EACPG,SAAUJ,EACVD,YAAaA,MCmCJM,E,kDAtCb,aAAe,IAAD,8BACZ,gBAcFL,aAAe,SAACM,GACd,EAAKC,SAAS,CAAEN,aAAcK,EAAEE,OAAOL,SAdvC,EAAKM,MAAQ,CACXb,SAAU,GACVK,aAAc,IAJJ,E,qDAOd,WAAqB,IAAD,OAClBS,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKP,SAAS,CAAEX,SAAUkB,S,oBAQhC,WAAU,IAAD,EAC4BC,KAAKN,MAAhCb,EADD,EACCA,SAAUK,EADX,EACWA,aACZe,EAAmBpB,EAASqB,QAAO,SAAC1B,GAAD,OACvCA,EAAQE,KAAKyB,cAAcC,SAASlB,EAAaiB,kBAEnD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEa,aAAcc,KAAKN,MAAMR,aACzBD,aAAce,KAAKf,aACnBD,YAAY,oBAEd,cAAC,EAAD,CAAUH,SAAUoB,W,GAjCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ee1a9283.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./card.style.css\"\n\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img\n      alt=\"monster\"\n      src={`https://robohash.org/${props.monster.id}?set=set2`}\n    />\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n)\n","import React from \"react\"\nimport \"./card-list.style.css\"\nimport { Card } from \"../card/card.component.jsx\"\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  )\n}\n","import \"./search-box.style.css\"\n\nexport const SearchBox = ({ placeholder, handleChange, searchString }) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      value={searchString}\n      onChange={handleChange}\n      placeholder={placeholder}\n    />\n  )\n}\n","import React, { Component } from \"react\"\nimport \"./App.css\"\nimport { CardList } from \"./components/card-list/card-list.component\"\nimport { SearchBox } from \"./components/search-box/search-box.component\"\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      monsters: [],\n      searchString: \"\",\n    }\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((result) => {\n        this.setState({ monsters: result })\n      })\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchString: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchString } = this.state\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchString.toLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1>Monsters rolodex</h1>\n        <SearchBox\n          searchString={this.state.searchString}\n          handleChange={this.handleChange}\n          placeholder=\"Search monsters\"\n        />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}